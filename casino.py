# This module contain the gambling functionality of the bot

import discord
from discord.ext.commands import Bot
from discord.ext import commands, tasks
import asyncio
import time
from discord import client
import random


from database.databasehandler import *
from main import bot

@bot.command()
@commands.cooldown(1, 600)
async def claim(ctx):
    userid = ctx.author.id

    if len(db.search(database.id == userid)) == 0:
        db.insert({'id':userid, 'balance':0})
    
    # look for the user object
    user_db_obj = db.search(database.id == userid)[0]
    # extract the balance from the user object
    user_balance = float(str(user_db_obj).split()[-1][:-1])
    
    # update with the new balance
    claimed_value = random.randrange(100, 300)
    user_balance += claimed_value
    db.update({'balance':user_balance}, database.id == userid)

    embed=discord.Embed(title='', color=0x07edea)
    embed.add_field(name='T·ªõi th√°ng l√£nh l∆∞∆°ng', value='\n\nNh·∫≠n l∆∞∆°ng th√†nh c√¥ng. ${} ƒë√£ ƒë∆∞·ª£c th√™m v√†o t√†i kho·∫£n.'.format(claimed_value), inline=False)
    embed.set_footer(text="S·ªë d∆∞ hi·ªán t·∫°i: ${}".format(user_balance))
    await ctx.send(embed=embed)


@bot.command()
async def gamble(ctx, amount=100):
    userid = ctx.author.id

    if len(db.search(database.id == userid)) == 0:
        db.insert({'id':userid, 'balance':0})
        await ctx.send('·ªû c√°i x√£ h·ªôi n√†y ph·∫£i ch·ªãu kh√≥ l√†m, ch·ªãu kh√≥ h·ªçc h·ªèi, kh·∫Øc c√≥ ti·ªÅn. Nay kh√¥ng ki·∫øm ƒë∆∞·ª£c nhi·ªÅu th√¨ ki·∫øm ƒë∆∞·ª£c √≠t, m√¨nh t√≠ch ti·ªÉu th√†nh ƒë·∫°i, m√¨nh ch∆∞a c√≥ th√¨ m√¨nh kh√¥ng ƒë∆∞·ª£c ch∆°i b·ªùi. M√¨nh ch∆∞a c√≥ th√¨ m√¨nh ƒë·ª´ng c√≥ ƒÉn ch∆°i l√™u l·ªïng, ƒë·ª´ng c√≥ a dua a t√≤ng, ƒë√†n ƒë√∫m.\n     -anh Hu·∫•n - 2020.')
    
    # look for the user object
    user_db_obj = db.search(database.id == userid)[0]
    # extract the balance from the user object
    user_balance = float(str(user_db_obj).split()[-1][:-1])

    if user_balance == 0 or amount>user_balance or amount <= 0:
        message = 'Kh√¥ng c√≥ ti·ªÅn m√† ƒë√≤i ƒë√°nh b·∫°c? Ng∆∞·ªùi kh√¥ng ch∆°i l√† ng∆∞√≤i th·∫Øng.'
    
    else:
        choices = [0, 0, 0, 0, 1.5, 1.5, 1.5, 2, 2, 3]
        multiplier = choices[random.randrange(0, len(choices))]

        user_balance = user_balance - amount
        db.update({'balance':user_balance}, database.id == userid)
        amount = amount*multiplier
        user_balance += amount
        db.update({'balance':user_balance}, database.id == userid)
        
        if multiplier == 0:
            message = 'Ch√∫c m·ª´ng, b·∫°n ƒë√£ m·∫•t h·∫øt ti·ªÅn. Ng∆∞·ªùi kh√¥ng ch∆°i l√† ng∆∞·ªùi th·∫Øng.'
        if multiplier > 0:
            message = 'ƒê√°nh b·∫°c th√†nh c√¥ng, b·∫°n ƒë√£ x{} s·ªë ti·ªÅn b·ªè ra (${}).'.format(multiplier, amount/multiplier)

    embed=discord.Embed(title='', color=0x07edea)
    embed.add_field(name='FEELING LUCKY KID?', value=message, inline=False)
    embed.set_footer(text="S·ªë d∆∞ hi·ªán t·∫°i: ${}".format(user_balance))
    await ctx.send(embed=embed)

@bot.command()
async def balance(ctx):
    userid = ctx.author.id

    if len(db.search(database.id == userid)) == 0:
        db.insert({'id':userid, 'balance':0})

    # look for the user object
    user_db_obj = db.search(database.id == userid)[0]
    # extract the balance from the user object
    user_balance = float(str(user_db_obj).split()[-1][:-1])

    await ctx.send('S·ªë d∆∞ trong t√†i kho·∫£n c·ªßa b·∫°n l√† ${}.'.format(user_balance))  

@bot.command()
async def steal(ctx, mentioned_user):
    member, mentioned_user = ctx.author, ctx.message.mentions[0]

    steal_success = random.choice([False, False, False, True, True])

    if len(db.search(database.id == mentioned_user.id)) == 0:
        db.insert({'id':mentioned_user.id, 'balance':0})
    
    # look for the user object
    author_obj = db.search(database.id == member.id)[0]
    # extract the balance from the user object
    author_balance = float(str(author_obj).split()[-1][:-1])

    # look for the user object
    victim_obj = db.search(database.id == mentioned_user.id)[0]
    # extract the balance from the user object
    victim_balance = float(str(victim_obj).split()[-1][:-1])

    if victim_balance <= 100:
        message = 'ƒê·ª´ng c∆∞·ªõp c·ªßa ng∆∞·ªùi ngh√®o th·∫±ng l·ªìn v√¥ t√¢m.'
        await ctx.send(message)
    elif author_balance <= 50:
        message = 'Kh√¥ng c√≥ ti·ªÅn m√† ƒë√≤i ƒëi ƒÉn c∆∞·ªõp?'
        await ctx.send(message)
        return
    elif steal_success:
        author_balance += 50
        victim_balance -= 50
        db.update({'balance':author_balance}, database.id == member.id)
        db.update({'balance':victim_balance}, database.id == mentioned_user.id)
        message = 'C∆∞·ªõp th√†nh c√¥ng t·ª´ {}, s·ªë d∆∞ m·ªõi l√† `${}`'.format(mentioned_user.mention, author_balance)
        await ctx.send(message)
    elif not steal_success:
        author_balance -= 50
        db.update({'balance':author_balance}, database.id == member.id)
        message = 'Kh√¥ng l√†m m√† ƒë√≤i c√≥ ƒÉn?\nTr·ªôm c·∫Øp b·ªã c·∫£nh s√°t b·∫Øt, ph·∫°t $50.\nS·ªë d∆∞ m·ªõi ${}.'.format(author_balance)
        await ctx.send(message)

@bot.command()
async def leaderboard(ctx):
    leaderboard = []

    for user in db:
        userid = int(str(user).split()[1][:-1])
        username = None
        user_balance = float(str(user).split()[-1][:-1])
    
        if userid == 342576375523311616:
            username = 'Qu√¢n'
        if userid == 417125704807874570:
            username = 'B√°ch'
        if userid == 355905526745268226:
            username = 'Minh'
        if userid == 760002567878344715:
            username = 'Th∆∞ k√Ω Bacon'
        if userid == 385348785733107714:
            username = 'ƒê·ª©c Anh'
        if userid == 234196333202767874:
            username = 'ƒê·ª©c'
        if userid == 455655526156599306:
            username = 'Tr√≠'
        if username is None:
            username = str(userid)
        
        leaderboard += [(user_balance, username)]
 
    leaderboard.sort()
    leaderboard.reverse()

    message = '```json\n'
    for elm in leaderboard:
        message += '{:<30}|  {}'.format(elm[1], elm[0])
        message += '\n'
    message = message[:-1]
    message += '```'


    await ctx.send(message)

@bot.command()
async def give(ctx, mentioned_user, amount):
    member, mentioned_user = ctx.author, ctx.message.mentions[0]
    amount = float(amount)

    if len(db.search(database.id == mentioned_user.id)) == 0:
        db.insert({'id':mentioned_user.id, 'balance':0})
    if len(db.search(database.id == member.id)) == 0:
        db.insert({'id':member.id, 'balance':0})
    
    # look for the user object
    author_obj = db.search(database.id == member.id)[0]
    # extract the balance from the user object
    author_balance = float(str(author_obj).split()[-1][:-1])

    # look for the user object
    victim_obj = db.search(database.id == mentioned_user.id)[0]
    # extract the balance from the user object
    victim_balance = float(str(victim_obj).split()[-1][:-1])

    if amount > author_balance:
        await ctx.send('Kh√¥ng c√≥ ti·ªÅn b√†y ƒë·∫∑t b·ªë th√≠?')
    elif member.id == mentioned_user.id:
        await ctx.send('Invalid arguments.')
    elif amount <= 0:
        await ctx.send('Invalid arguments.')
    else:
        if member.id != mentioned_user.id:
            author_balance -= amount
            victim_balance += amount
            db.update({'balance':author_balance}, database.id == member.id)
            db.update({'balance':victim_balance}, database.id == mentioned_user.id)
            await ctx.send('{} donated `${}` cho {}'.format(member.mention, amount, mentioned_user.mention))

@bot.command()
@commands.has_permissions(administrator=True)
async def reset_database(ctx):
    db.update({'balance':200})
    await ctx.send('Database rebooted. Balance are now set to $200.')


@bot.command()
async def slot(ctx, amount):
    userid = ctx.author.id
    amount = int(amount)
    if len(db.search(database.id == userid)) == 0:
        db.insert({'id':userid, 'balance':0})
        await ctx.send('·ªû c√°i x√£ h·ªôi n√†y ph·∫£i ch·ªãu kh√≥ l√†m, ch·ªãu kh√≥ h·ªçc h·ªèi, kh·∫Øc c√≥ ti·ªÅn. Nay kh√¥ng ki·∫øm ƒë∆∞·ª£c nhi·ªÅu th√¨ ki·∫øm ƒë∆∞·ª£c √≠t, m√¨nh t√≠ch ti·ªÉu th√†nh ƒë·∫°i, m√¨nh ch∆∞a c√≥ th√¨ m√¨nh kh√¥ng ƒë∆∞·ª£c ch∆°i b·ªùi. M√¨nh ch∆∞a c√≥ th√¨ m√¨nh ƒë·ª´ng c√≥ ƒÉn ch∆°i l√™u l·ªïng, ƒë·ª´ng c√≥ a dua a t√≤ng, ƒë√†n ƒë√∫m.\n     -anh Hu·∫•n - 2020.')

    # look for the user object
    user_db_obj = db.search(database.id == userid)[0]
    # extract the balance from the user object
    user_balance = float(str(user_db_obj).split()[-1][:-1])

    if user_balance == 0 or amount>user_balance or amount <= 0:
        message = 'Kh√¥ng c√≥ ti·ªÅn m√† ƒë√≤i ƒë√°nh b·∫°c? Ng∆∞·ªùi kh√¥ng ch∆°i l√† ng∆∞√≤i th·∫Øng.'
    
    else:
        multiplier = 0
        values = ['orange', 'banana', 'grape', 'pineapple', 'coin']
        emoji_dict = {'orange':'üçä', 'banana':'üçå', 'grape':'üçá', 'pineapple':'üçç', 'coin':'üí∞'}
        output = []
        for i in range(3):
            output += [random.choice(values)]
        if output[0] == output[1] and output[0] == output[2]:
            if output[0] == 'coin':
                multiplier = 5
            else:
                multiplier = 3
        elif output[0] == output[1] or output[1] == output[2] or output[0] == output[2]:
            if output.count('coin') == 2:
                multiplier = 2.5
            else:
                multiplier = 2
        elif 'coin' in output:
            multiplier = 0.5
        else:
            multiplier = 0

        for i in range(len(output)):
            output[i] = emoji_dict[output[i]]
        
        slot_output = '|  {}  |  {}  |  {}  |'.format(output[0], output[1], output[2])

        if multiplier == 0:
            message = 'Ch√∫c m·ª´ng, b·∫°n ƒë√£ m·∫•t h·∫øt ti·ªÅn. Ng∆∞·ªùi kh√¥ng ch∆°i l√† ng∆∞·ªùi th·∫Øng.'
        if multiplier == 0.5:
            message = 'Ch√∫c may m·∫Øn l·∫ßn sau, b·∫°n ƒë∆∞·ª£c ho√†n l·∫°i 1 n·ª≠a s·ªë ti·ªÅn (x0.5).'
        else:
            message = 'ƒê√°nh b·∫°c th√†nh c√¥ng, b·∫°n ƒë√£ x{} s·ªë ti·ªÅn b·ªè ra (${}).'.format(multiplier, amount)
        
        user_balance = user_balance - amount
        db.update({'balance':user_balance}, database.id == userid)
        amount = amount*multiplier
        user_balance += amount
        db.update({'balance':user_balance}, database.id == userid)

        embed=discord.Embed(title='', color=0x07edea)
        embed.add_field(name='FEELING LUCKY KID?', value='.', inline=False)
        embed.add_field(name=slot_output, value=message, inline=False)
        embed.set_footer(text="S·ªë d∆∞ hi·ªán t·∫°i: ${}".format(user_balance))
        await ctx.send(embed=embed)

